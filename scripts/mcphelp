#!/bin/bash
# Pablo's Interactive MCP Help & Management System
# Following the pattern of the existing cheat system

# Check if we're in an interactive environment
check_interactive() {
    if [[ ! -t 0 || ! -t 1 ]]; then
        return 1  # Not interactive
    fi
    if ! command -v gum >/dev/null 2>&1; then
        return 1  # gum not available
    fi
    # Test if gum can actually work
    if ! gum --help >/dev/null 2>&1; then
        return 1  # gum not functional
    fi
    return 0  # Interactive and gum works
}

# Colors
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if user is new to MCP help
FIRST_RUN_FILE="$HOME/.mcphelp_welcomed"
CONFIG_DIR="$HOME/.terminal-power"
STATUS_FILE="$CONFIG_DIR/status.json"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# Smart setup detection
detect_setup_status() {
    local setup_score=0
    local max_score=10
    
    # Check core components (2 points each)
    [[ -f ~/voice-to-claude.sh ]] && ((setup_score += 2))
    [[ -f ~/github-search.sh ]] && ((setup_score += 2))
    [[ -x ~/bin/mcphelp ]] && ((setup_score += 1))
    
    # Check API keys (1 point each)
    [[ -n "$OPENAI_API_KEY" ]] && ((setup_score += 1))
    [[ -n "$GITHUB_TOKEN" ]] && ((setup_score += 1))
    [[ -n "$SUPABASE_ACCESS_TOKEN" ]] && ((setup_score += 1))
    [[ -n "$GOOGLE_API_KEY" ]] && ((setup_score += 1))
    
    # Check Claude Code (1 point)
    command -v claude >/dev/null 2>&1 && ((setup_score += 1))
    
    # Calculate setup percentage
    SETUP_PERCENTAGE=$((setup_score * 100 / max_score))
    
    # Determine setup status
    if [[ $setup_score -ge 8 ]]; then
        SETUP_STATUS="complete"
    elif [[ $setup_score -ge 5 ]]; then
        SETUP_STATUS="partial"
    else
        SETUP_STATUS="needs_setup"
    fi
}

# Auto-fix common issues
auto_fix_issues() {
    local fixes_applied=()
    
    # Fix executable permissions
    if [[ -f ~/voice-to-claude.sh && ! -x ~/voice-to-claude.sh ]]; then
        chmod +x ~/voice-to-claude.sh && fixes_applied+=("Made voice script executable")
    fi
    
    if [[ -f ~/github-search.sh && ! -x ~/github-search.sh ]]; then
        chmod +x ~/github-search.sh && fixes_applied+=("Made GitHub search script executable")
    fi
    
    if [[ -f ~/bin/mcphelp && ! -x ~/bin/mcphelp ]]; then
        chmod +x ~/bin/mcphelp && fixes_applied+=("Made MCP help script executable")
    fi
    
    # Create bin directory if missing
    if [[ ! -d ~/bin ]]; then
        mkdir -p ~/bin && fixes_applied+=("Created ~/bin directory")
    fi
    
    # Report fixes
    if [[ ${#fixes_applied[@]} -gt 0 ]]; then
        echo -e "${GREEN}🔧 Auto-fixed issues:${NC}"
        printf '  ✅ %s\n' "${fixes_applied[@]}"
        echo ""
    fi
}

# Fallback menu for non-interactive environments
show_fallback_menu() {
    echo "🤖 MCP HELP - CYBERPUNK AI TERMINAL"
    echo "=================================="
    echo ""
    echo "Available commands:"
    echo "  mcphelp            - Show this menu"
    echo "  mcphelp quick      - Quick start guide"
    echo "  mcphelp api        - API key setup"
    echo "  mcphelp mcp        - MCP management"
    echo "  mcphelp test       - Test your setup"
    echo "  mcphelp voice      - Voice commands guide"
    echo "  mcphelp github     - GitHub search help"
    echo "  mcphelp troubleshoot - Fix common issues"
    echo ""
    echo "For full interactive experience:"
    echo "  1. Install gum: brew install gum"
    echo "  2. Run from a proper terminal (not IDE)"
    echo "  3. Ensure TTY is available"
}

# Enhanced welcome screen with smart onboarding
show_welcome() {
    # Run setup detection and auto-fixes
    detect_setup_status
    auto_fix_issues
    
    if [ ! -f "$FIRST_RUN_FILE" ]; then
        if ! check_interactive; then
            show_fallback_menu
            return
        fi
        
        clear
        echo -e "${CYAN}"
        if command -v figlet >/dev/null && command -v lolcat >/dev/null; then
            figlet "Terminal Power" | lolcat
        else
            echo "🤖 TERMINAL POWER - AI COMMAND CENTER 🤖"
        fi
        echo -e "${NC}"
        
        # Show personalized welcome based on setup status
        case "$SETUP_STATUS" in
            "complete")
                gum style \
                    --border double \
                    --border-foreground 87 \
                    --padding "1 2" \
                    --margin "1" \
                    --align center \
                    "🎉 WELCOME BACK, CYBERPUNK WIZARD! 🎉

Setup Status: ${SETUP_PERCENTAGE}% Complete ✅

Your AI terminal is ready to rock:
• Voice commands are configured
• MCPs are loaded and ready
• APIs are connected
• All systems operational

Ready to create some magic?"
                ;;
            "partial")
                gum style \
                    --border double \
                    --border-foreground 214 \
                    --padding "1 2" \
                    --margin "1" \
                    --align center \
                    "🚀 WELCOME TO TERMINAL POWER! 🚀

Setup Status: ${SETUP_PERCENTAGE}% Complete ⚠️

You're halfway to AI mastery!
We detected some missing components.
Let's get you fully powered up.

Ready to complete the setup?"
                ;;
            "needs_setup")
                gum style \
                    --border double \
                    --border-foreground 208 \
                    --padding "1 2" \
                    --margin "1" \
                    --align center \
                    "🎯 WELCOME TO TERMINAL POWER! 🎯

Setup Status: ${SETUP_PERCENTAGE}% Complete 🔧

Looks like you're just getting started!
No worries - I'll guide you through everything.
In 5 minutes you'll have AI superpowers.

Ready to transform your terminal?"
                ;;
        esac
        
        echo ""
        if [[ "$SETUP_STATUS" == "complete" ]]; then
            echo -e "${GREEN}💡 Next: Choose 'Quick Start Guide' to see what you can do!${NC}"
            echo ""
            if confirm "Open the Terminal Power control center?"; then
                # Continue to main menu
                true
            else
                return
            fi
        else
            echo -e "${BLUE}💡 I'll open an interactive menu with easy setup options.${NC}"
            echo ""
            if confirm "Let's set up your missing components?"; then
                show_guided_setup
                return
            else
                if confirm "Skip setup and explore what works now?"; then
                    show_quick_tour
                    return
                fi
            fi
        fi
        touch "$FIRST_RUN_FILE"
    fi
}

# Guided setup for incomplete installations
show_guided_setup() {
    clear
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "🛠️ GUIDED SETUP - LET'S GET YOU POWERED UP!

I'll check what's missing and help you fix it.
This will take just a few minutes.

Don't worry - I'll explain everything as we go!"
    
    echo ""
    confirm "Ready to start?" || return
    
    # Guide through each missing component
    if [[ ! -f ~/voice-to-claude.sh ]]; then
        show_voice_setup_guide
    fi
    
    if [[ -z "$OPENAI_API_KEY" ]]; then
        show_api_setup_guide
    fi
    
    if ! command -v claude >/dev/null 2>&1; then
        show_claude_setup_guide
    fi
    
    # Recheck status
    detect_setup_status
    
    if [[ "$SETUP_STATUS" == "complete" ]]; then
        gum style \
            --border double \
            --border-foreground 87 \
            --padding "1 2" \
            --align center \
            "🎉 SETUP COMPLETE! WELCOME TO THE FUTURE! 🎉

Your terminal is now a cyberpunk AI command center!
Everything is configured and ready to use.

Time to create some magic! ✨"
    else
        gum style \
            --border rounded \
            --border-foreground 214 \
            --padding "1 2" \
            "🚀 GREAT PROGRESS! ${SETUP_PERCENTAGE}% COMPLETE

You're almost there! A few more steps and 
you'll have full AI superpowers.

Use 'mcp test' to see what's still needed."
    fi
}

# Quick tour for new users
show_quick_tour() {
    clear
    gum style \
        --border rounded \
        --border-foreground 99 \
        --padding "1 2" \
        "🚀 QUICK TOUR - YOUR AI SUPERPOWERS

1. 🎙️ Voice Commands → Speak to control your terminal
   Try: voice \"show me my supabase projects\"

2. 🔍 GitHub Discovery → Find any code instantly
   Try: ghsearch \"deno auth\" repositories

3. 🎨 AI Image Generation → Create wallpapers & graphics
   Try: \"Generate a cyberpunk wallpaper using DALL-E\"

4. 🗄️ Database Operations → Natural language SQL
   Try: \"Show me all tables in my database\"

5. 📧 Email Automation → AI-powered email management
   Try: \"Find emails about business opportunities\"

🎯 TIP: Type 'mcp' anytime to return to this control center!"
    
    echo ""
    gum input --placeholder "Press enter to continue to main menu..."
}

# Main menu function
show_main_menu() {
    # Handle command line arguments for fallback mode
    if [[ $# -gt 0 ]]; then
        case "$1" in
            "help"|"--help"|"")
                show_fallback_menu
                return
                ;;
            "quick")
                show_quick_start_text
                return
                ;;
            "api")
                show_api_setup_text
                return
                ;;
            "mcp")
                show_mcp_management_text
                return
                ;;
            "test")
                test_setup_text
                return
                ;;
            "voice")
                show_voice_guide_text
                return
                ;;
            "github")
                show_github_guide_text
                return
                ;;
            "troubleshoot")
                show_troubleshooting_text
                return
                ;;
        esac
    fi
    
    if ! check_interactive; then
        show_fallback_menu
        return
    fi
    
    clear
    echo -e "${CYAN}"
    if command -v figlet >/dev/null && command -v lolcat >/dev/null; then
        figlet "MCP Control" | lolcat
    else
        echo "🤖 MCP CYBERPUNK TERMINAL 🤖"
    fi
    echo -e "${NC}"
    
    # Show quick status
    show_quick_status
    
    echo ""
    CHOICE=$(gum choose \
        "🚀 Quick Start Guide" \
        "🔧 MCP Management (Add/Remove/List)" \
        "🎨 API Packs (Creative/Dev/Fun Extensions)" \
        "🔑 API Key Setup & Management" \
        "🧪 Test Your Setup" \
        "🎙️ Voice Commands Guide" \
        "🔍 GitHub Search Help" \
        "📚 MCP Arsenal Overview (Your 16 MCPs)" \
        "🎨 Creative Workflows & Examples" \
        "🚨 Troubleshooting & Diagnostics" \
        "⭐ What's New & Updates" \
        "🌈 Show Me Something Cool" \
        "❌ Exit")
    
    case "$CHOICE" in
        "🚀 Quick Start Guide")
            show_quick_start
            ;;
        "🔧 MCP Management (Add/Remove/List)")
            show_mcp_management
            ;;
        "🎨 API Packs (Creative/Dev/Fun Extensions)")
            show_pack_management
            ;;
        "🔑 API Key Setup & Management")
            show_api_setup
            ;;
        "🧪 Test Your Setup")
            test_setup
            ;;
        "🎙️ Voice Commands Guide")
            show_voice_guide
            ;;
        "🔍 GitHub Search Help")
            show_github_guide
            ;;
        "📚 MCP Arsenal Overview (Your 16 MCPs)")
            show_mcp_arsenal
            ;;
        "🎨 Creative Workflows & Examples")
            show_creative_workflows
            ;;
        "🚨 Troubleshooting & Diagnostics")
            show_troubleshooting
            ;;
        "⭐ What's New & Updates")
            show_whats_new
            ;;
        "🌈 Show Me Something Cool")
            show_something_cool
            ;;
        "❌ Exit")
            echo ""
            if command -v cowsay >/dev/null && command -v lolcat >/dev/null; then
                echo "Keep building the future with AI! 🤖⚡" | cowsay | lolcat
            else
                echo "🤖 Keep building the future with AI! ⚡"
            fi
            echo ""
            echo "💡 TIP: Type 'mcp' anytime to return!"
            exit 0
            ;;
    esac
    
    echo ""
    gum confirm "Back to main menu?" && show_main_menu
}

# Quick status overview
show_quick_status() {
    local voice_status="❌"
    local github_status="❌"
    local supabase_status="❌"
    local mcp_count=0
    
    # Check API keys
    [[ -n "$OPENAI_API_KEY" ]] && voice_status="✅"
    [[ -n "$GITHUB_TOKEN" ]] && github_status="✅"
    [[ -n "$SUPABASE_ACCESS_TOKEN" ]] && supabase_status="✅"
    
    # Count MCPs (if claude command exists)
    if command -v claude >/dev/null 2>&1; then
        mcp_count=$(claude mcp list 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    fi
    
    gum style \
        --border rounded \
        --border-foreground 87 \
        --padding "0 1" \
        "📊 QUICK STATUS: Voice $voice_status | GitHub $github_status | Supabase $supabase_status | MCPs: $mcp_count"
}

# Quick Start Guide
show_quick_start() {
    clear
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "1 2" \
        --margin "1" \
        "🚀 QUICK START - GET YOUR AI TERMINAL RUNNING

STEP 1: Check Your Setup
Run: mcp test
This shows what's working and what needs setup.

STEP 2: Set Up API Keys (Critical!)
Run: mcp api
Add your OpenAI, GitHub, Google, and Supabase keys.

STEP 3: Verify MCPs Are Active
Run: mcp mcp
List and test your 16 AI-powered MCPs.

STEP 4: Test Voice Commands
Run: voice
Try: \"show me my supabase projects\"

STEP 5: Try GitHub Discovery
Run: ghsearch \"deno fresh auth\" repositories
Find any code you need instantly!

🎯 FIRST COMMANDS TO TRY:
• voice → \"generate a desktop wallpaper\"
• voice → \"find github examples of authentication\"
• voice → \"show me my recent emails\"
• voice → \"create a new deno project\"

🚨 CRITICAL: Restart Claude Code after adding MCPs!"
    
    echo ""
    if gum confirm "Run the setup test now?"; then
        test_setup
    fi
}

# API Setup and Management
show_api_setup() {
    clear
    echo -e "${CYAN}"
    if command -v figlet >/dev/null; then
        echo "API Setup" | figlet -f small | lolcat
    else
        echo "🔑 API KEY SETUP & MANAGEMENT"
    fi
    echo -e "${NC}"
    
    # Show current API status
    show_api_status_dashboard
    
    echo ""
    API_CHOICE=$(gum choose \
        "📋 Show API Status Dashboard" \
        "➕ Add New API Key" \
        "🧪 Test API Connections" \
        "📋 Copy Environment Variables" \
        "💰 Show API Costs & Limits" \
        "🔗 Get API Key Links" \
        "🚨 Priority APIs (Get These First)" \
        "🔙 Back to main menu")
    
    case "$API_CHOICE" in
        "📋 Show API Status Dashboard")
            show_detailed_api_status
            ;;
        "➕ Add New API Key")
            add_api_key_wizard
            ;;
        "🧪 Test API Connections")
            test_api_connections
            ;;
        "📋 Copy Environment Variables")
            generate_env_vars
            ;;
        "💰 Show API Costs & Limits")
            show_api_costs
            ;;
        "🔗 Get API Key Links")
            show_api_links
            ;;
        "🚨 Priority APIs (Get These First)")
            show_priority_apis
            ;;
        "🔙 Back to main menu")
            return
            ;;
    esac
    
    echo ""
    gum confirm "Continue with API setup?" && show_api_setup
}

# Show API status dashboard
show_api_status_dashboard() {
    local status_text=""
    
    # Check each API
    if [[ -n "$OPENAI_API_KEY" ]]; then
        status_text+="🎙️ Voice & AI:       ✅ OpenAI API Ready\\n"
    else
        status_text+="🎙️ Voice & AI:       ❌ Need OpenAI API Key\\n"
    fi
    
    if [[ -n "$GITHUB_TOKEN" ]]; then
        status_text+="🔍 GitHub Search:    ✅ GitHub Token Ready\\n"
    else
        status_text+="🔍 GitHub Search:    ❌ Need GitHub Token\\n"
    fi
    
    if [[ -n "$SUPABASE_ACCESS_TOKEN" ]]; then
        status_text+="🗄️ Database Ops:     ✅ Supabase Ready\\n"
    else
        status_text+="🗄️ Database Ops:     ❌ Need Supabase Token\\n"
    fi
    
    if [[ -n "$GOOGLE_API_KEY" ]]; then
        status_text+="📧 Gmail/Calendar:   ✅ Google API Ready\\n"
    else
        status_text+="📧 Gmail/Calendar:   ❌ Need Google API Key\\n"
    fi
    
    if [[ -n "$REPLICATE_API_TOKEN" ]]; then
        status_text+="🎨 Advanced AI:      ✅ Replicate Ready\\n"
    else
        status_text+="🎨 Advanced AI:      ⚠️  Optional: Replicate API\\n"
    fi
    
    if [[ -n "$RAILWAY_TOKEN" ]]; then
        status_text+="🚀 Deployments:      ✅ Railway Ready\\n"
    else
        status_text+="🚀 Deployments:      ⚠️  Optional: Railway Token\\n"
    fi
    
    if [[ -n "$ELEVENLABS_API_KEY" ]]; then
        status_text+="🎵 Voice Generation: ✅ ElevenLabs Ready\\n"
    else
        status_text+="🎵 Voice Generation: ⚠️  Optional: ElevenLabs API\\n"
    fi
    
    if [[ -n "$STEAM_API_KEY" ]]; then
        status_text+="🎮 Gaming:           ✅ Steam API Ready\\n"
    else
        status_text+="🎮 Gaming:           ⚠️  Optional: Steam API\\n"
    fi
    
    gum style \
        --border double \
        --border-foreground 87 \
        --padding "1 2" \
        "📊 API STATUS DASHBOARD\\n$status_text"
}

# MCP Management
show_mcp_management() {
    clear
    echo -e "${CYAN}"
    if command -v figlet >/dev/null; then
        echo "MCP Control" | figlet -f small | lolcat
    else
        echo "🔧 MCP MANAGEMENT"
    fi
    echo -e "${NC}"
    
    # Show MCP status
    show_mcp_status
    
    echo ""
    MCP_CHOICE=$(gum choose \
        "📋 List Active MCPs" \
        "➕ Add New MCP" \
        "❌ Remove MCP" \
        "🧪 Test Individual MCP" \
        "🔄 Restart Claude Code" \
        "🚨 Troubleshoot MCPs" \
        "📦 Install MCP Dependencies" \
        "🔙 Back to main menu")
    
    case "$MCP_CHOICE" in
        "📋 List Active MCPs")
            list_active_mcps
            ;;
        "➕ Add New MCP")
            add_mcp_wizard
            ;;
        "❌ Remove MCP")
            remove_mcp_wizard
            ;;
        "🧪 Test Individual MCP")
            test_individual_mcp
            ;;
        "🔄 Restart Claude Code")
            restart_claude_code_guide
            ;;
        "🚨 Troubleshoot MCPs")
            troubleshoot_mcps
            ;;
        "📦 Install MCP Dependencies")
            install_mcp_dependencies
            ;;
        "🔙 Back to main menu")
            return
            ;;
    esac
    
    echo ""
    gum confirm "Continue with MCP management?" && show_mcp_management
}

# Show MCP status
show_mcp_status() {
    if command -v claude >/dev/null 2>&1; then
        local mcp_count=$(claude mcp list 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        local status_color="87"
        local status_text="✅ Claude Code Found"
        
        if [[ "$mcp_count" -eq 0 ]]; then
            status_color="208"
            status_text="⚠️  No MCPs Configured"
        elif [[ "$mcp_count" -lt 16 ]]; then
            status_color="214"
            status_text="⚠️  $mcp_count/16 MCPs Active"
        else
            status_text="✅ $mcp_count MCPs Active"
        fi
        
        gum style \
            --border rounded \
            --border-foreground "$status_color" \
            --padding "0 1" \
            "🤖 MCP STATUS: $status_text"
    else
        gum style \
            --border rounded \
            --border-foreground 208 \
            --padding "0 1" \
            "❌ Claude Code not found - install from https://docs.anthropic.com/claude-code"
    fi
}

# Pack Management
show_pack_management() {
    clear
    echo -e "${CYAN}"
    if command -v figlet >/dev/null; then
        echo "API Packs" | figlet -f small | lolcat
    else
        echo "🎨 API PACK MANAGEMENT"
    fi
    echo -e "${NC}"
    
    # Use the pack manager script
    ~/Terminal_Power/scripts/pack-manager.sh packs
    
    echo ""
    PACK_CHOICE=$(gum choose \
        "🎨 Install Creative Pack (Photos/Colors/Weather)" \
        "📊 Show Pack Status" \
        "🧪 Test Installed Packs" \
        "📚 Learn About Packs" \
        "🔙 Back to Main Menu")
    
    case "$PACK_CHOICE" in
        "🎨 Install Creative Pack (Photos/Colors/Weather)")
            echo ""
            gum style \
                --border rounded \
                --border-foreground 99 \
                --padding "1 2" \
                "🎨 CREATIVE PACK INSTALLATION
                
This pack adds visual and design APIs to Terminal Power:
📸 Unsplash photos, 🌈 color tools, 🌤️ weather
📱 QR codes, 🎭 fake data, 💬 quotes

Some APIs need free keys (we'll help you get them)."
            
            echo ""
            if confirm "Install Creative Pack?"; then
                ~/Terminal_Power/scripts/pack-manager.sh install creative
                echo ""
                confirm "Press Enter to continue..."
            fi
            show_pack_management
            ;;
        "📊 Show Pack Status")
            ~/Terminal_Power/scripts/pack-manager.sh status
            echo ""
            confirm "Press Enter to continue..."
            show_pack_management
            ;;
        "🧪 Test Installed Packs")
            ~/Terminal_Power/scripts/pack-manager.sh test creative
            echo ""
            confirm "Press Enter to continue..."
            show_pack_management
            ;;
        "📚 Learn About Packs")
            clear
            gum style \
                --border double \
                --border-foreground 87 \
                --padding "1 2" \
                "🎨 ABOUT API PACKS

Terminal Power uses a modular system:

🏗️ CORE: Voice, GitHub, Domains, MCPs (16 AI tools)
📦 PACKS: Optional API extensions you can add

🎨 CREATIVE PACK:
  - Unsplash photos for your apps
  - Color palette extraction from websites  
  - Weather data from anywhere
  - QR code generation
  - Fake test data generation
  - Design quotes and inspiration

🚀 WHY PACKS?
  - Keep Terminal Power lightweight
  - Add only what you need
  - Easy setup with guided wizards
  - No API key required for core features

Each pack is optional and adds new voice commands!"
            
            echo ""
            confirm "Press Enter to continue..."
            show_pack_management
            ;;
        "🔙 Back to Main Menu")
            return
            ;;
    esac
}

# Test setup
test_setup() {
    clear
    echo -e "${CYAN}"
    if command -v figlet >/dev/null; then
        echo "System Test" | figlet -f small | lolcat
    else
        echo "🧪 TESTING YOUR SETUP"
    fi
    echo -e "${NC}"
    
    echo "🧪 Testing Your Cyberpunk AI Terminal Setup..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Test essential tools
    echo -e "\\n${YELLOW}Essential Tools:${NC}"
    command -v claude >/dev/null && echo "✅ Claude Code" || echo "❌ Claude Code (CRITICAL - install from anthropic.com)"
    command -v deno >/dev/null && echo "✅ Deno $(deno --version | head -1 | cut -d' ' -f2)" || echo "❌ Deno"
    command -v git >/dev/null && echo "✅ Git" || echo "❌ Git"
    command -v node >/dev/null && echo "✅ Node.js $(node --version)" || echo "❌ Node.js"
    command -v python3 >/dev/null && echo "✅ Python3" || echo "❌ Python3"
    
    # Test voice setup
    echo -e "\\n${YELLOW}Voice Commands:${NC}"
    command -v ffmpeg >/dev/null && echo "✅ ffmpeg (audio recording)" || echo "❌ ffmpeg - install: brew install ffmpeg"
    command -v jq >/dev/null && echo "✅ jq (JSON parsing)" || echo "❌ jq - install: brew install jq"
    [[ -f ~/voice-to-claude.sh ]] && echo "✅ Voice script installed" || echo "❌ Voice script missing"
    [[ -n "$OPENAI_API_KEY" ]] && echo "✅ OpenAI API key set" || echo "❌ OpenAI API key missing"
    
    # Test GitHub integration
    echo -e "\\n${YELLOW}GitHub Integration:${NC}"
    command -v gh >/dev/null && echo "✅ GitHub CLI" || echo "❌ GitHub CLI - install: brew install gh"
    [[ -f ~/github-search.sh ]] && echo "✅ GitHub search script" || echo "❌ GitHub search script missing"
    [[ -n "$GITHUB_TOKEN" ]] && echo "✅ GitHub token set" || echo "❌ GitHub token missing"
    
    # Test MCPs
    echo -e "\\n${YELLOW}MCPs Status:${NC}"
    if command -v claude >/dev/null 2>&1; then
        local mcp_count=$(claude mcp list 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        if [[ "$mcp_count" -gt 0 ]]; then
            echo "✅ $mcp_count MCPs configured"
        else
            echo "❌ No MCPs configured - add with: claude mcp add <name> <command>"
        fi
    else
        echo "❌ Cannot test MCPs - Claude Code not found"
    fi
    
    # Test API keys
    echo -e "\\n${YELLOW}API Keys:${NC}"
    [[ -n "$OPENAI_API_KEY" ]] && echo "✅ OpenAI (voice + AI)" || echo "❌ OpenAI API key missing"
    [[ -n "$GOOGLE_API_KEY" ]] && echo "✅ Google (Gmail/Calendar)" || echo "❌ Google API key missing"
    [[ -n "$GITHUB_TOKEN" ]] && echo "✅ GitHub (code search)" || echo "❌ GitHub token missing"
    [[ -n "$SUPABASE_ACCESS_TOKEN" ]] && echo "✅ Supabase (database)" || echo "❌ Supabase token missing"
    [[ -n "$REPLICATE_API_TOKEN" ]] && echo "✅ Replicate (advanced AI)" || echo "⚠️  Replicate API (optional)"
    [[ -n "$RAILWAY_TOKEN" ]] && echo "✅ Railway (deployment)" || echo "⚠️  Railway token (optional)"
    
    echo -e "\\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Overall assessment
    local critical_missing=0
    command -v claude >/dev/null || ((critical_missing++))
    [[ -n "$OPENAI_API_KEY" ]] || ((critical_missing++))
    [[ -f ~/voice-to-claude.sh ]] || ((critical_missing++))
    
    if [[ $critical_missing -eq 0 ]]; then
        echo -e "${GREEN}🎉 EXCELLENT! Your cyberpunk terminal is ready!${NC}"
        echo ""
        echo "🚀 Try these commands:"
        echo "  voice → \"show me my supabase projects\""
        echo "  ghsearch \"deno auth\" repositories"
        echo "  mcp → for this control center"
    elif [[ $critical_missing -le 2 ]]; then
        echo -e "${YELLOW}⚠️  ALMOST READY! Fix the ❌ items above.${NC}"
        echo ""
        echo "🔧 Quick fixes:"
        echo "  • Add missing API keys: mcp api"
        echo "  • Install missing tools with brew"
    else
        echo -e "${RED}🚨 NEEDS SETUP! Several critical items missing.${NC}"
        echo ""
        echo "📚 Follow the setup guide: mcp quick"
    fi
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

# Text versions for fallback mode
show_quick_start_text() {
    echo "🚀 QUICK START GUIDE"
    echo "==================="
    echo ""
    echo "1. Check setup: mcphelp test"
    echo "2. Add API keys: mcphelp api"  
    echo "3. Configure MCPs: mcphelp mcp"
    echo "4. Test voice: voice"
    echo "5. Test GitHub: ghsearch \"deno\" repositories"
}

show_api_setup_text() {
    echo "🔑 API KEY SETUP"
    echo "==============="
    echo ""
    echo "Required APIs:"
    echo "  OpenAI    → https://platform.openai.com/account/api-keys"
    echo "  GitHub    → https://github.com/settings/tokens"
    echo "  Google    → https://console.cloud.google.com/apis/credentials"
    echo "  Supabase  → https://supabase.com/dashboard/account/tokens"
    echo ""
    echo "Add to ~/.zshrc:"
    echo "  export OPENAI_API_KEY=\"your-key\""
    echo "  export GITHUB_TOKEN=\"your-token\""
    echo "  etc..."
}

show_mcp_management_text() {
    echo "🔧 MCP MANAGEMENT"
    echo "================"
    echo ""
    echo "List MCPs:    claude mcp list"
    echo "Add MCP:      claude mcp add <name> <command>"
    echo "Remove MCP:   claude mcp remove <name>"
    echo ""
    echo "After changes: Restart Claude Code"
}

test_setup_text() {
    echo "🧪 TESTING SETUP"
    echo "==============="
    echo ""
    echo "Run: mcphelp test"
    echo "This will check all components and show what needs fixing."
}

show_voice_guide_text() {
    echo "🎙️ VOICE COMMANDS"
    echo "================"
    echo ""
    echo "Basic usage:"
    echo "  voice     → Record 5 seconds"
    echo "  voice10   → Record 10 seconds"
    echo ""
    echo "Example commands:"
    echo "  \"show me my supabase projects\""
    echo "  \"find github examples of deno auth\""
    echo "  \"generate a desktop wallpaper\""
}

show_github_guide_text() {
    echo "🔍 GITHUB SEARCH"
    echo "==============="
    echo ""
    echo "Basic usage:"
    echo "  ghsearch \"search term\" repositories"
    echo "  ghsearch \"code pattern\" code"
    echo ""
    echo "Examples:"
    echo "  ghsearch \"deno fresh auth\" repositories"
    echo "  ghsearch \"supabase middleware\" code"
}

show_troubleshooting_text() {
    echo "🚨 TROUBLESHOOTING"
    echo "=================="
    echo ""
    echo "Common issues:"
    echo "  Voice not working → Check OpenAI API key, install ffmpeg"
    echo "  MCPs not loading → Restart Claude Code"
    echo "  GitHub search failing → Set GitHub token"
    echo ""
    echo "Run: mcphelp test"
    echo "For detailed diagnostics"
}

# Placeholder functions for interactive features
show_detailed_api_status() {
    gum style \
        --border double \
        --border-foreground 87 \
        --padding "1 2" \
        "🔍 DETAILED API STATUS

This will show:
• Connection test results for each API
• Usage limits and costs
• Setup instructions for missing APIs
• Troubleshooting for failed connections

[Feature coming in next update]"
    gum input --placeholder "Press enter to continue..."
}

add_api_key_wizard() {
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "1 2" \
        "🧙‍♂️ API KEY SETUP WIZARD

This interactive wizard will guide you through:
• Getting API keys from each service
• Testing the connections
• Adding them to your shell configuration
• Verifying everything works

[Feature coming in next update]"
    gum input --placeholder "Press enter to continue..."
}

list_active_mcps() {
    if command -v claude >/dev/null 2>&1; then
        echo "📋 Currently Active MCPs:"
        echo "========================"
        claude mcp list 2>/dev/null || echo "No MCPs found or Claude Code not responding"
    else
        echo "❌ Claude Code not found. Install from https://docs.anthropic.com/claude-code"
    fi
    echo ""
    gum input --placeholder "Press enter to continue..."
}

show_mcp_arsenal() {
    gum style \
        --border double \
        --border-foreground 99 \
        --padding "1 2" \
        "📚 YOUR 16 MCP ARSENAL

🎨 Creative & AI (4 MCPs):
• outsource - Multi-AI access (DALL-E, GPT-4, Claude)
• huggingface - 300k+ free AI models
• ableton-live - Music production control
• sequential-thinking - Enhanced reasoning

🌐 Data & Web (5 MCPs):
• supabase - Database operations
• gmail - Email automation (OAuth2)
• calendar - Google Calendar integration
• youtube-watchlater - YouTube playlist management
• webscraper - Web data extraction

🔧 System & Files (4 MCPs):
• macos-automator - Mac system control
• filesystem - Advanced file operations
• wcgw - Autonomous shell execution
• terminal-control - Enhanced terminal automation

🔗 Integration & Tools (3 MCPs):
• openapi - Universal API connector
• markitdown-simple - Universal file converter
• free-will - AI autonomy experiment

💡 Use these with voice commands for maximum power!"
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

show_creative_workflows() {
    WORKFLOW=$(gum choose \
        "🎬 Content Creator Workflow" \
        "🎵 Music Producer Workflow" \
        "👨‍💻 Indie Developer Workflow" \
        "🧘 Digital Minimalist Workflow" \
        "🎨 Creative Freelancer Workflow" \
        "🔙 Back")
    
    case "$WORKFLOW" in
        "🎬 Content Creator Workflow")
            gum style \
                --border double \
                --border-foreground 205 \
                --padding "1 2" \
                "🎬 CONTENT CREATOR WORKFLOW

1. Research & Planning:
   voice → \"Research trending topics in web development\"
   ghsearch \"deno projects\" repositories

2. Asset Creation:
   voice → \"Generate 5 thumbnail concepts using DALL-E\"
   voice → \"Create background music using Ableton Live\"

3. Production:
   voice → \"Write a video script about building a SaaS\"
   voice → \"Take screenshots of my development process\"

4. Publishing:
   voice → \"Upload to YouTube with optimized description\"
   voice → \"Create social media posts to promote video\""
            ;;
        "🎵 Music Producer Workflow")
            gum style \
                --border double \
                --border-foreground 214 \
                --padding "1 2" \
                "🎵 MUSIC PRODUCER WORKFLOW

1. Creative Inspiration:
   voice → \"Create a lofi hip-hop track for studying\"

2. Music Creation:
   voice → \"Create new Ableton session with lofi template\"
   voice → \"Generate chord progression in C minor\"
   voice → \"Add vintage vinyl effects and analog warmth\"

3. Visual Design:
   voice → \"Generate album artwork using Stable Diffusion\"
   voice → \"Create social media graphics for release\"

4. Distribution:
   voice → \"Export track in multiple formats\"
   voice → \"Upload to SoundCloud with proper tags\""
            ;;
        "👨‍💻 Indie Developer Workflow")
            gum style \
                --border double \
                --border-foreground 87 \
                --padding "1 2" \
                "👨‍💻 INDIE DEVELOPER WORKFLOW

1. Market Research:
   voice → \"Research competitor pricing and features\"
   ghsearch \"saas boilerplate\" repositories

2. Rapid Prototyping:
   voice → \"Create Deno Fresh project with authentication\"
   voice → \"Set up Supabase database with user tables\"

3. Design & Branding:
   voice → \"Generate logo and brand colors\"
   voice → \"Create landing page mockup\"

4. Deployment:
   voice → \"Deploy app to Railway with PostgreSQL\"
   voice → \"Set up CI/CD pipeline\""
            ;;
        "🧘 Digital Minimalist Workflow")
            gum style \
                --border double \
                --border-foreground 99 \
                --padding "1 2" \
                "🧘 DIGITAL MINIMALIST WORKFLOW

1. File Organization:
   voice → \"Organize Downloads folder by type and date\"
   voice → \"Find and remove duplicate files\"

2. Email Decluttering:
   voice → \"Archive promotional emails from last 6 months\"
   voice → \"Unsubscribe from unused newsletters\"

3. Desktop Optimization:
   voice → \"Generate minimal, calming wallpaper\"
   voice → \"Organize desktop icons\"

4. Automation:
   voice → \"Create weekly automated backups\"
   voice → \"Set up productivity dashboard\""
            ;;
        "🎨 Creative Freelancer Workflow")
            gum style \
                --border double \
                --border-foreground 212 \
                --padding "1 2" \
                "🎨 CREATIVE FREELANCER WORKFLOW

1. Client Onboarding:
   voice → \"Create project folder structure\"
   voice → \"Set up Notion workspace for tracking\"

2. Creative Development:
   voice → \"Generate mood boards and concepts\"
   voice → \"Create multiple logo variations\"
   voice → \"Design website mockups\"

3. Client Communication:
   voice → \"Draft professional project updates\"
   voice → \"Create visual progress reports\"

4. Project Delivery:
   voice → \"Package final deliverables\"
   voice → \"Generate project case study\""
            ;;
    esac
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

show_troubleshooting() {
    ISSUE=$(gum choose \
        "🎙️ Voice Commands Not Working" \
        "🔍 GitHub Search Failing" \
        "🤖 MCPs Not Loading" \
        "🔑 API Keys Not Working" \
        "🚀 Claude Code Issues" \
        "🔙 Back")
    
    case "$ISSUE" in
        "🎙️ Voice Commands Not Working")
            gum style \
                --border double \
                --border-foreground 208 \
                --padding "1 2" \
                "🎙️ VOICE COMMANDS TROUBLESHOOTING

❌ Problem: Voice commands not working

✅ Solutions:
1. Check OpenAI API key:
   echo \$OPENAI_API_KEY

2. Install ffmpeg:
   brew install ffmpeg

3. Check microphone permissions:
   System Preferences > Security & Privacy > Microphone
   Enable for Terminal/iTerm2

4. Test voice script exists:
   ls -la ~/voice-to-claude.sh

5. Test manually:
   ~/voice-to-claude.sh 5"
            ;;
        "🔍 GitHub Search Failing")
            gum style \
                --border double \
                --border-foreground 208 \
                --padding "1 2" \
                "🔍 GITHUB SEARCH TROUBLESHOOTING

❌ Problem: GitHub search not working

✅ Solutions:
1. Check GitHub token:
   echo \$GITHUB_TOKEN

2. Authenticate GitHub CLI:
   gh auth login

3. Set GH_TOKEN:
   export GH_TOKEN=\"\$GITHUB_TOKEN\"

4. Test GitHub CLI:
   gh api user

5. Check script exists:
   ls -la ~/github-search.sh"
            ;;
        "🤖 MCPs Not Loading")
            gum style \
                --border double \
                --border-foreground 208 \
                --padding "1 2" \
                "🤖 MCPs TROUBLESHOOTING

❌ Problem: MCPs not loading in Claude Code

✅ Solutions:
1. Restart Claude Code completely
   Quit and reopen the application

2. Check MCP configuration:
   claude mcp list

3. Check logs:
   Claude > View > Output > MCP

4. Verify API keys are set:
   env | grep -E \"(OPENAI|GOOGLE|GITHUB|SUPABASE)\"

5. Re-add problematic MCPs:
   claude mcp remove <name>
   claude mcp add <name> <command>"
            ;;
        "🔑 API Keys Not Working")
            gum style \
                --border double \
                --border-foreground 208 \
                --padding "1 2" \
                "🔑 API KEYS TROUBLESHOOTING

❌ Problem: API keys not working

✅ Solutions:
1. Check keys are exported:
   echo \$OPENAI_API_KEY
   echo \$GITHUB_TOKEN

2. Reload shell:
   source ~/.zshrc

3. Test API directly:
   curl -H \"Authorization: Bearer \$OPENAI_API_KEY\" \\
        https://api.openai.com/v1/models

4. Check for typos in .zshrc:
   grep -n \"export.*API\" ~/.zshrc

5. Verify account has credits/access"
            ;;
        "🚀 Claude Code Issues")
            gum style \
                --border double \
                --border-foreground 208 \
                --padding "1 2" \
                "🚀 CLAUDE CODE TROUBLESHOOTING

❌ Problem: Claude Code not working

✅ Solutions:
1. Check Claude Code is installed:
   which claude

2. Update to latest version:
   Visit: https://docs.anthropic.com/claude-code

3. Restart completely:
   Quit and reopen Claude Code

4. Check for updates:
   Claude > Check for Updates

5. Reset configuration:
   Remove ~/.claude and reconfigure"
            ;;
    esac
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

show_whats_new() {
    gum style \
        --border double \
        --border-foreground 212 \
        --padding "1 2" \
        "⭐ WHAT'S NEW IN YOUR AI TERMINAL

🆕 LATEST UPDATES:
• Interactive MCP Help System (this menu!)
• Voice-controlled terminal with Whisper API
• GitHub code discovery engine
• 16 AI-powered MCP servers configured
• Terminal Power documentation package

🔜 COMING SOON:
• Wake word detection (\"Hey Claude\")
• Continuous voice mode
• Voice responses from Claude
• Auto-repair for common issues
• Cloud sync for configurations

🎯 RECENT ADDITIONS:
• Rapid webapp builder with Deno + Fresh
• AI-powered personal diary with voice
• Creative workflow automation
• One-command installer script

💡 TIP: Check the Terminal_Power folder for full documentation!"
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

show_something_cool() {
    COOL=$(gum choose \
        "🤖 AI Terminal Demo" \
        "🎨 Generate AI Art" \
        "🎙️ Voice Command Demo" \
        "🌈 Rainbow Terminal" \
        "🦜 Parrot Party" \
        "🎵 System Stats + Music" \
        "🔙 Back")
    
    case "$COOL" in
        "🤖 AI Terminal Demo")
            clear
            if command -v figlet >/dev/null && command -v lolcat >/dev/null; then
                echo "CYBERPUNK AI TERMINAL" | figlet | lolcat
            fi
            echo ""
            echo "🤖 Your AI powers:" | lolcat
            echo "  • Voice control with Whisper API" | lolcat
            echo "  • 16 AI-powered MCPs" | lolcat  
            echo "  • GitHub code discovery" | lolcat
            echo "  • Database operations" | lolcat
            echo "  • Image generation" | lolcat
            echo "  • Email automation" | lolcat
            echo "" | lolcat
            if command -v cowsay >/dev/null; then
                echo "You are now a cyberpunk wizard! 🧙‍♂️⚡" | cowsay | lolcat
            fi
            ;;
        "🎨 Generate AI Art")
            echo "🎨 AI Art Generation Demo" | figlet -f small | lolcat
            echo ""
            echo "Try these voice commands:" | lolcat
            echo "  voice → \"generate a cyberpunk wallpaper\"" | lolcat
            echo "  voice → \"create a logo for my startup\"" | lolcat
            echo "  voice → \"make a minimalist desktop background\"" | lolcat
            ;;
        "🎙️ Voice Command Demo")
            echo "🎙️ Voice Control Demo" | figlet -f small | lolcat
            echo ""
            echo "Example commands to try:" | lolcat
            echo "  voice → \"show me my database tables\"" | lolcat
            echo "  voice → \"find react components on github\"" | lolcat
            echo "  voice → \"create a new deno project\"" | lolcat
            echo "  voice → \"organize my downloads folder\"" | lolcat
            ;;
        "🌈 Rainbow Terminal")
            clear
            echo "🌈 RAINBOW PARTY MODE! 🌈" | figlet | lolcat
            if command -v fortune >/dev/null && command -v ponysay >/dev/null; then
                fortune | ponysay | lolcat
            fi
            echo ""
            echo "Your terminal is now 20% cooler! ✨" | lolcat
            ;;
        "🦜 Parrot Party")
            echo "🦜 Starting Parrot Party..." | lolcat
            curl --connect-timeout 5 --max-time 15 parrot.live 2>/dev/null || echo "🦜 Parrot party is taking a break!" | lolcat
            ;;
        "🎵 System Stats + Music")
            clear
            if command -v neofetch >/dev/null; then
                neofetch
            fi
            echo ""
            echo "🎵 Play some music and run: cava" | lolcat
            echo "For awesome audio visualization!" | lolcat
            ;;
    esac
    
    echo ""
    gum input --placeholder "Press enter to continue..."
}

# Handle command line arguments
if [[ $# -gt 0 ]]; then
    show_main_menu "$@"
    exit 0
fi

# Start with welcome if first run
show_welcome

# Start the main menu
show_main_menu